<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>矩阵与线性变换</title>
      <link href="/2024/01/24/linear-transformation/"/>
      <url>/2024/01/24/linear-transformation/</url>
      
        <content type="html"><![CDATA[<p>明明线代已经考完了，笔者现在才重新在几何理解线代，属实有点奇怪。<br>今天在b站的<a href="https://space.bilibili.com/88461692">3Blue1Brown</a>听他的线性代数本质，清晰了许多。</p><p><strong>很遗憾，矩阵是什么是说不清的，你必须得自己看看。——墨菲斯</strong></p><p>首先，我们可以知道，直角坐标系中，任意一个向量可以用两个最基本的正交基向量表示，而将两个向量变换（不改变原点位置，直线仍然是直线，对应平行线依旧平行）后的位置，他们坐标会发生变化，相应的，他们所构成的向量也会发生变化。</p><p>事实上，我们想要知道变换后的向量的坐标，我们只需要变换后的基向量的坐标和他们之间的几何关系就可以求得。</p><p>而变化后的基向量的坐标（3，-2）（2，1）组成一个矩阵，而原线性关系为（5，7），具体可看下面的图片<br><img src="https://github.com/Penryn/picture/blob/main/1.png?raw=true" alt="图片"><br><img src="https://github.com/Penryn/picture/blob/main/3.png?raw=true" alt="图片"></p><p>将其抽象出来，我们可以得到矩阵乘于向量的几何含义，就是通过这样的运算得到所构成向量的新坐标。<br><img src="https://github.com/Penryn/picture/blob/main/4.png?raw=true" alt="图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gorm的多种关联方式</title>
      <link href="/2023/11/23/gorm-association/"/>
      <url>/2023/11/23/gorm-association/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gorm.io/zh_CN/docs/belongs_to.html">Gorm官网</a>上将这个分成了belongs to，has one，has many，many to many这些关系，今天笔者就简单分成这三种关系（一对一，一对多和多对多）来逐一讲解。</p><hr><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>以笔者写的一份项目为例（一个用户对应一个用户信息）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package models</span><br><span class="line"></span><br><span class="line">type User struct {</span><br><span class="line">UserID     int      `json:"-" gorm:"primaryKey"`</span><br><span class="line">Name       string   `json:"name"`</span><br><span class="line">Password   []byte   `json:"-"`</span><br><span class="line">Userinfo   Userinfo `json:"-"`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">type Userinfo struct {</span><br><span class="line">ID       int    `json:"-" `</span><br><span class="line">UserID   int    `json:"-"`</span><br><span class="line">Name     string `json:"name"`</span><br><span class="line">Phone    string `json:"phone"`</span><br><span class="line">Email    string `json:"email"`</span><br><span class="line">Birthday string `json:"birthday"`</span><br><span class="line">Address  string `json:"address"`</span><br><span class="line">Motto    string `json:"motto"`</span><br><span class="line">Avatar   string `json:"avatar"`</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>增</li></ol><ul><li><p>创建用户并携带相关个人信息</p></li><li><p>新建用户并关联已有信息</p></li><li><p>新建个人信息并关联已有用户</p></li><li><p>已有用户关联已有信息</p></li></ul><ol start="2"><li>删</li></ol><ul><li><p>清除用户与信息的关系</p></li><li><p>删除用户并连带信息一起删除</p></li><li><p>仅删除信息保留用户</p></li><li><p>仅删除用户保留信息</p></li></ul><ol start="3"><li>改</li></ol><ul><li><p>直接通过信息表修改内容</p></li><li><p>通过用户表修改内容</p></li></ul><ol start="4"><li>查</li></ol><p>（等笔者找个时间补上）</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你搭建属于你自己的hexo博客，并布置在github page上</title>
      <link href="/2023/11/11/createblog/"/>
      <url>/2023/11/11/createblog/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><hr><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><ul><li>Node.js</li><li>Git</li><li>修改npm为淘宝镜像源，并设置cnpm</li></ul><ol><li><p>环境的下载只需点开网站找到适合自己的版本安装即可，这里不赘述。</p></li><li><p>安装完毕后可以通过cmd命令行输入node -v,npm -v和git –version来验证，如果出现下图则安装成功。<br>  <img src="/../picture/createblog/1.png" alt="图片"></p></li><li><p>修改npm的镜像源为在国内更为稳定的淘宝镜像源（建议永久设置）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">临时改变镜像源 </span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">永久设置为淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm安装，在国外服务器不佳时就可以用cnpm代替npm命令</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h2 id="2-github准备"><a href="#2-github准备" class="headerlink" title="2.github准备"></a>2.github准备</h2><ol><li><p>打开<a href="https://github.com/">github</a>,并登录或注册你的账号</p></li><li><p>新建一个格式为你的用户名.github.io的仓库，并设置为公开<br> <img src="/../picture/createblog/2.png" alt="图片"><br> <img src="/../picture/createblog/3.png" alt="图片"></p></li><li><p>创建成功后在桌面点击右键，Git Bash Here，打开Git的命令行输入这两行代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "此处填写你注册github时的用户名"</span><br><span class="line">git config --global user.email "此处填写你注册github时的邮箱"</span><br></pre></td></tr></tbody></table></figure></li><li><p>然后就可以在C:/Users/[电脑登录的用户名]/下找到.gitconfig文件（如果没能找到，请打开显示windows显示隐藏文件的功能），用编辑器打开看到以下内容代表配置成功。<br><img src="/../picture/createblog/5.png" alt="图片"></p></li></ol><hr><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><ol><li>首先新建一个文件夹👀作为你的博客文件的存放位置，点进去打开Git命令行分别输入<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># hexo框架的安装</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">&nbsp; </span><br><span class="line"># 等上一个命令完成后，再输入下面的命令</span><br><span class="line">hexo init</span><br><span class="line">&nbsp; &nbsp; </span><br><span class="line"># 安装博客所需要的依赖文件(如果上面安装了cnpm则可以把下面的npm换成cnpm)</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure></li><li>等待运行完成，你会发现此时文件夹内多了好多文件。此时本地搭建完成，我们来运行一下试试看，输入以下命令.<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g           </span><br><span class="line">hexo s                                          </span><br></pre></td></tr></tbody></table></figure><img src="/../picture/createblog/4.png" alt="图片"></li><li>根据提示我们打开 <a href="http://localhost:4000/">http://localhost:4000</a> ，就可以看到生成的网页，说明Hexo已经成功在本地运行.</li></ol><hr><h2 id="4-发布到github"><a href="#4-发布到github" class="headerlink" title="4.发布到github"></a>4.发布到github</h2><p>我们已经完成了Hexo下载安装和本地运行，接下来将本地博客发布到Github让别人也能通过网址访问你的博客。</p><ol><li><p>在博客所在文件夹下打开Git命令行，分别输入以下命令(如果上面安装了cnpm则可以把下面的npm换成cnpm)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装用来发布的插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">&nbsp;​</span><br><span class="line"># 将本地目录与Github关联起来</span><br><span class="line"># 这步输入后一直回车即可</span><br><span class="line">ssh-keygen -t rsa -C "你的邮箱地址"</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 C:/Users/[电脑登录的用户名] 目录下找到名为.ssh 的文件夹，打开其中的 id_rsa.pub，复制里面的的内容。 然后打开 Github，点击右上角的头像 Settings 选择 SSH and GPG keys。<br><img src="/../picture/createblog/6.png" alt="图片"><br><img src="/../picture/createblog/7.png" alt="图片"></p></li><li><p>点击 New SSH key 将之前复制的内容粘帖到 Key 的框中，Title 可以随意，点击 Add SSH key 完成添加<br><img src="/../picture/createblog/8.png" alt="图片"></p></li><li><p>回到命令行界面测试是否与Github连接成功，输入ssh -T <a href="mailto:git@github.com">git@github.com</a>，出现一个询问内容输入yes，出现You’ve successfully …说明连接成功。</p></li><li><p>进入博客站点目录，用文本编辑器打开_config.yml，这个_config.yml 是博客的配置文件，在以后会经常使用到，修改如下图的几个地方：<br><img src="/../picture/createblog/9.png" alt="图片"></p></li><li><p>然后滑到文件最底部deploy处添加如下代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&nbsp; type: git</span><br><span class="line">&nbsp; repo: git@github.com:github用户名/github用户名.github.io.git &nbsp;        </span><br><span class="line">&nbsp; branch: master     (或者是main)</span><br></pre></td></tr></tbody></table></figure></li></ol><p>7.最后一步，生成页面并发布，我们执行如下命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&nbsp; # generate, Hexo会根据配置文件渲染出一套静态页面</span><br><span class="line">&nbsp; hexo g</span><br><span class="line">&nbsp;​</span><br><span class="line">&nbsp; # deploy, 将上一步渲染出的一系列文件上传至至Github Pages</span><br><span class="line">&nbsp; hexo d</span><br><span class="line">&nbsp;​</span><br><span class="line">&nbsp; # 或者也可以直接输入此命令，直接完成渲染和上传</span><br><span class="line">&nbsp; hexo g -d</span><br></pre></td></tr></tbody></table></figure><p>上传完成后，在浏览器中打开网址 你的github用户名.github.io，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话等一下或按ctrl+f5刷新清除一下浏览器缓存试试。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
